{"version":3,"file":"static/webpack/static/development/pages/index.js.56c16ae38de898fc4916.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["/* @jsx jsx */\nimport React, { useState, useEffect, useRef } from 'react';\nimport Head from 'next/head';\nimport theme from '../parts/theme';\nimport { jsx } from 'theme-ui';\nimport { ThemeProvider } from 'theme-ui';\nimport { requestInterval } from '../parts/utils';\n\nlet special_keys = 'xs'.split('');\n\nObject.fromEntries = arr =>\n  Object.assign({}, ...Array.from(arr, ([k, v]) => ({ [k]: v })));\n\nlet KeyTip = props => (\n  <span\n    sx={{\n      border: 'solid 1px black',\n      width: '2ch',\n      textAlign: 'center',\n      display: 'inline-block',\n    }}\n  >\n    {props.children}\n  </span>\n);\nconst Home = () => {\n  let [dimensions, setDimensions] = useState([null, null]);\n  let canvasRef = useRef();\n  let overlayCanvasRef = useRef();\n  let requestRef = useRef();\n  let keymap = useRef({});\n  let coordinates = useRef([0, 0]);\n\n  let size = 14;\n\n  function keyAction(key, repeat) {\n    let canvas_width = Math.floor(window.innerWidth / size) * size;\n    let canvas_height = Math.floor(window.innerHeight / size) * size;\n\n    let ctx = canvasRef.current.getContext('2d');\n    ctx.fillStyle = 'black';\n\n    let octx = overlayCanvasRef.current.getContext('2d');\n    octx.lineWidth = 2;\n\n    if (special_keys.includes(key)) {\n      if (key === 'x') {\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas_width, canvas_height);\n        ctx.fillStyle = 'black';\n      } else if (key === 's' && !repeat) {\n        let encoded = canvasRef.current.toDataURL('image/png');\n        let link = document.createElement('a');\n        link.setAttribute('href', encoded);\n        link.setAttribute('download', 'etch.png');\n        link.dispatchEvent(\n          new MouseEvent(`click`, {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n          })\n        );\n      }\n      return;\n    }\n\n    if (key === 'init') {\n      ctx.fillStyle = 'white';\n      ctx.fillRect(0, 0, canvas_width, canvas_height);\n    }\n\n    let current = coordinates.current;\n\n    let inc = size;\n    let modify = [0, 0];\n    if (keymap.current['j']) modify[1] += inc;\n    if (keymap.current['k']) modify[1] += -inc;\n    if (keymap.current['h']) modify[0] += -inc;\n    if (keymap.current['l']) modify[0] += inc;\n\n    let next = [current[0] + modify[0], current[1] + modify[1]];\n    if (next[0] < 0) next[0] = canvas_width - size;\n    if (next[0] >= canvas_width) next[0] = 0;\n    if (next[1] < 0) next[1] = canvas_height - size;\n    if (next[1] >= canvas_height) next[1] = 0;\n    coordinates.current = next;\n\n    if (keymap.current['d']) {\n      ctx.fillStyle = 'black';\n      ctx.fillRect(coordinates.current[0], coordinates.current[1], size, size);\n    } else if (keymap.current['e']) {\n      ctx.fillStyle = 'white';\n      ctx.fillRect(coordinates.current[0], coordinates.current[1], size, size);\n    }\n\n    octx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    octx.strokeRect(coordinates.current[0], coordinates.current[1], size, size);\n  }\n\n  function downHandler(e) {\n    keymap.current[e.key] = true;\n    keyAction(e.key, e.repeat);\n  }\n\n  function upHandler(e) {\n    keymap.current[e.key] = false;\n  }\n\n  function setWindowSize() {\n    let canvas_width = Math.floor(window.innerWidth / size) * size;\n    let canvas_height = Math.floor(window.innerHeight / size) * size;\n    setDimensions([canvas_width, canvas_height]);\n  }\n\n  useEffect(() => {\n    setWindowSize();\n    setTimeout(() => {\n      keyAction('init', false);\n    }, 0);\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div>\n        <style jsx global>{`\n          * {\n            box-sizing: border-box;\n          }\n          html {\n            font-family: ${theme.fonts.body};\n            font-size: ${theme.fontSizes[0]}px;\n            background: ${theme.colors.background};\n            line-height: ${theme.lineHeights.body};\n          }\n          body {\n            margin: 0;\n          }\n          textarea {\n            font-family: inherit;\n            font-size: inherit;\n            line-height: inherit;\n          }\n        `}</style>\n\n        <Head>\n          <title>Etch</title>\n        </Head>\n        <canvas\n          ref={canvasRef}\n          sx={{ background: 'white' }}\n          width={dimensions[0]}\n          height={dimensions[1]}\n          css={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            display: dimensions[0] !== null ? 'block' : 'none',\n          }}\n        />\n        <canvas\n          ref={overlayCanvasRef}\n          sx={{ background: 'transparent' }}\n          width={dimensions[0]}\n          height={dimensions[1]}\n          css={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            display: dimensions[0] !== null ? 'block' : 'none',\n          }}\n        />\n        <div\n          css={{\n            position: 'fixed',\n            right: size * 2,\n            bottom: size * 2,\n            padding: size,\n            fontSize: size,\n            lineHeight: 1.5,\n            background: 'white',\n            boxShadow: '2px 1px 8px rgba(0,0,0,0.3)',\n          }}\n        >\n          <p>Etch is a keyboard-based drawing tool.</p>\n          <p>Movement</p>\n          <p>\n            <KeyTip>h</KeyTip> ← <KeyTip>j</KeyTip> ↓ <KeyTip>k</KeyTip> ↑{' '}\n            <KeyTip>l</KeyTip> →\n          </p>\n          <p>Drawing</p>\n          <p>\n            <KeyTip>d</KeyTip> draw <KeyTip>e</KeyTip> erase\n          </p>\n          <p>Special</p>\n          <p>\n            <KeyTip>x</KeyTip> clear <KeyTip>s</KeyTip> save as png\n          </p>\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default Home;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AADA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAWA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;A","sourceRoot":""}